<UserControl x:Class="VixenApplication.SetupDisplay.Views.PropNodeTree"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:interactivity="http://schemas.catelproject.com"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300"
             xmlns:dd="urn:gong-wpf-dragdrop"
             xmlns:commonUtils="clr-namespace:Common.WPFCommon.Utils;assembly=WPFCommon"
             xmlns:behaviors="clr-namespace:Common.WPFCommon.Behaviors;assembly=WPFCommon"
             xmlns:viewModels="clr-namespace:VixenApplication.SetupDisplay.ViewModels">

    <UserControl.Resources>

        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/WPFCommon;component/Theme/Theme.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>


            <Style x:Key="PropNodeListViewItemContainerStyle" TargetType="{x:Type ListViewItem}">
                <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="IsTabStop" Value="False"/>
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="Padding" Value="4,1"/>
                <!--<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>-->

                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="1"/>

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListViewItem}">
                            <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="True"/>
                                        <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Border}"/>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="True"/>
                                        <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Border}"/>
                                    <Setter Property="BorderThickness" TargetName="Bd" Value="1"></Setter>
                                    <Setter Property="Foreground" Value="{StaticResource ForeColorBrush}"/>
                                </MultiTrigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{StaticResource ForeColorDisabledBrush}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="PropNodeListStyle" TargetType="{x:Type ListView}">
                <Setter Property="Foreground" Value="{StaticResource ForeColorBrush}"/>
                <Setter Property="Background" Value="{StaticResource BackColorBrush}" />
                <Setter Property="ItemContainerStyle" Value="{StaticResource PropNodeListViewItemContainerStyle}"></Setter>
            </Style>

            <Style x:Key="PropNodeTreeViewItemContainerStyle" TargetType="{x:Type TreeViewItem}">
                <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}"></Setter>
                <Setter Property="behaviors:TreeViewMultipleSelectionBehavior.IsItemSelected" Value="{Binding IsSelected, Mode=TwoWay}"></Setter>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment,
				  RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment,
				  RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                <Setter Property="Padding" Value="1,0,0,0"/>
                <Setter Property="Foreground" Value="{StaticResource ForeColorBrush}"/>
                <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TreeViewItem}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MinWidth="19" Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <ToggleButton x:Name="Expander" Style="{StaticResource ExpandCollapseToggleStyle}" IsChecked="{Binding Path=IsExpanded,
								  RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>
                                <Border Name="Bd" Grid.Column="1" BorderThickness="1" >
                                    <ContentPresenter x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                                </Border>
                                <ItemsPresenter x:Name="ItemsHost" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsExpanded" Value="false">
                                    <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="HasItems" Value="false">
                                    <Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="HasHeader" Value="false"/>
                                        <Condition Property="Width" Value="Auto"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="PART_Header" Property="MinWidth" Value="75"/>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="HasHeader" Value="false"/>
                                        <Condition Property="Height" Value="Auto"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="PART_Header" Property="MinHeight" Value="19"/>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="behaviors:TreeViewMultipleSelectionBehavior.IsItemSelected" Value="true"/>
                                        <Condition Property="Selector.IsSelectionActive" Value="false"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Border}"/>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="behaviors:TreeViewMultipleSelectionBehavior.IsItemSelected" Value="true"/>
                                        <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Background}" />
                                    <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Border}"/>
                                    <Setter Property="BorderThickness" TargetName="Bd" Value="1"></Setter>
                                    <Setter Property="Foreground" Value="{StaticResource ForeColorBrush}"/>
                                </MultiTrigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="{StaticResource ForeColorDisabledBrush}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <ContextMenu x:Key="PropNodeTreeContextMenu">
                <MenuItem Header="Add Prop" Command="{Binding Path=DataContext.PropNodeTreeViewModel.CreatePropCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"></MenuItem>
                <MenuItem Header="Create Group" Command="{Binding Path=DataContext.PropNodeTreeViewModel.CreateNodeCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"></MenuItem>
            </ContextMenu>

            <Style x:Key="PropNodeTreeViewStyle" TargetType="{x:Type TreeView}">
                <Setter Property="Foreground" Value="{StaticResource ForeColorBrush}"/>
                <Setter Property="Background" Value="{StaticResource BackColorBrush}" />
                <Setter Property="ItemContainerStyle" Value="{StaticResource PropNodeTreeViewItemContainerStyle}" />
                <Setter Property="Padding" Value="0" />
                <Setter Property="ContextMenu" Value="{StaticResource PropNodeTreeContextMenu}"/>
            </Style>

            <ContextMenu x:Key="PropNodeTreeItemContextMenu">
                <MenuItem Header="Create Empty Group" Command="{Binding Path=DataContext.PropNodeTreeViewModel.CreateNodeCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"></MenuItem>
                <MenuItem Header="Copy to New Group" Command="{Binding Path=DataContext.PropNodeTreeViewModel.CreateGroupCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"></MenuItem>
                <MenuItem Header="Move to New Group" Command="{Binding Path=DataContext.PropNodeTreeViewModel.MoveToGroupCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"></MenuItem>
                <Separator/>
                <MenuItem Header="Cut" Command="{Binding Path=DataContext.PropNodeTreeViewModel.CutCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}">
                    <MenuItem.Icon>
                        <Image Source="/Resources;component/cut.png" Width="16" Height="16"></Image>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="Copy" Command="{Binding Path=DataContext.PropNodeTreeViewModel.CopyCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}">
                    <MenuItem.Icon>
                        <Image Source="/Resources;component/page_white_copy.png" Width="16" Height="16"></Image>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="Paste" Command="{Binding Path=DataContext.PropNodeTreeViewModel.PasteCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}">
                    <MenuItem.Icon>
                        <Image Source="/Resources;component/page_white_paste.png" Width="16" Height="16"></Image>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="Paste as New" Command="{Binding Path=DataContext.PropNodeTreeViewModel.PasteAsNewCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}">
                    <MenuItem.Icon>
                        <Image Source="/Resources;component/page_white_paste.png" Width="16" Height="16"></Image>
                    </MenuItem.Icon>
                </MenuItem>
                <Separator/>
                <MenuItem Header="Delete" Command="{Binding Path=DataContext.PropNodeTreeViewModel.DeleteCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" CommandParameter="{Binding}">
                    <MenuItem.Icon>
                        <Image Source="/Resources;component/Resources/delete_32.png" Width="16" Height="16"></Image>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="Rename" Command="{Binding Path=DataContext.PropNodeTreeViewModel.RenameCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" CommandParameter="{Binding}"></MenuItem>
                <MenuItem Header="Find/Replace Rename" Command="{Binding Path=DataContext.PropNodeTreeViewModel.SubstitutionRenameCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" CommandParameter="{Binding}"></MenuItem>
            </ContextMenu>

            <!-- For the context menu to work, we must shift it into a style, which means that the context menu is now in a
			visual tree that is more closely related to the current data context. All we have to do then is set the style, 
			which hooks up the context menu. -->
            <Style x:Key="PropNodeContextMenuStyle" TargetType="{x:Type TextBlock}">
                <Setter Property="ContextMenu" Value="{StaticResource PropNodeTreeItemContextMenu}"/>
            </Style>

            <Style x:Key="PropListViewItemContainerStyle" TargetType="{x:Type ListViewItem}">
                <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="IsTabStop" Value="False"/>
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="Padding" Value="4,1"/>
                <!--<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>-->

                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="1"/>

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListViewItem}">
                            <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="True"/>
                                        <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Border}"/>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="True"/>
                                        <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Border}"/>
                                    <Setter Property="BorderThickness" TargetName="Bd" Value="1"></Setter>
                                    <Setter Property="Foreground" Value="{StaticResource ForeColorBrush}"/>
                                </MultiTrigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{StaticResource ForeColorDisabledBrush}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="PropListStyle" TargetType="{x:Type ListView}">
                <Setter Property="Foreground" Value="{StaticResource ForeColorBrush}"/>
                <Setter Property="Background" Value="{StaticResource BackColorBrush}" />
                <Setter Property="ItemContainerStyle" Value="{StaticResource PropListViewItemContainerStyle}"></Setter>
            </Style>


        </ResourceDictionary>

    </UserControl.Resources>

    <Border BorderThickness="1" BorderBrush="{StaticResource BorderColorBrush}">
        <Grid Background="{StaticResource BackColorBrush}">
            <TabControl Background="{StaticResource BackColorBrush}"
                        SelectedIndex="{Binding SelectedTabIndex}"
                        Width="Auto" Margin="5,5,10,5">
                <TabItem Header="Layout">
                    <TreeView x:Name="PropNodeTreeView" Style="{StaticResource PropNodeTreeViewStyle}"
                  ItemsSource="{Binding PropNodeTreeViewModel.RootNodeViewModel}" 
                  BorderThickness="0"
                  VerticalAlignment="Stretch"
                  HorizontalAlignment="Stretch"
                  ScrollViewer.CanContentScroll="True"
                  FocusManager.IsFocusScope="True"
                  dd:DragDrop.IsDragSource="True"
                  dd:DragDrop.IsDropTarget="True"
                  dd:DragDrop.DropHandler="{Binding PropNodeTreeViewModel}"
                  dd:DragDrop.DragHandler="{Binding PropNodeTreeViewModel}"
                  Width="Auto" Margin="5,5,10,5">


                        <i:Interaction.Behaviors>
                            <behaviors:TreeViewMultipleSelectionBehavior SelectedItems="{Binding PropNodeTreeViewModel.SelectedItems}" />
                            <!--<interactivity:KeyPressToCommand Command="{Binding DrawingPanelViewModel.DeleteSelectedLightsCommand}" Key="Delete" />-->
                            <interactivity:KeyPressToCommand Command="{Binding PropNodeTreeViewModel.CutCommand}" Key="X" Modifiers="Control" />
                            <interactivity:KeyPressToCommand Command="{Binding PropNodeTreeViewModel.CopyCommand}" Key="C" Modifiers="Control"/>
                            <interactivity:KeyPressToCommand Command="{Binding PropNodeTreeViewModel.PasteCommand}" Key="V" Modifiers="Control"/>
                        </i:Interaction.Behaviors>

                        <TreeView.ItemTemplate>
                            <HierarchicalDataTemplate ItemsSource="{Binding ChildrenViewModels}" DataType="{x:Type viewModels:PropNodeViewModel}">
                                <StackPanel Orientation="Horizontal">
                                    <Image Source="/Resources;component/bullet_purple.png" Width="16" Height="16" Visibility="{Binding IsLeaf, Converter={StaticResource BooleanToVisibilityConverter}}"></Image>
                                    <TextBlock x:Name="ReadOnlyText" Text="{Binding PropNode.Name}" Margin="0,2,0,2" Style="{StaticResource PropNodeContextMenuStyle}" Focusable="True">
									<i:Interaction.Triggers>
										<i:EventTrigger EventName="MouseLeftButtonUp">
											<interactivity:EventToCommand Command="{Binding BeginEditCommand}" DisableAssociatedObjectOnCannotExecute="False" />
										</i:EventTrigger>
									</i:Interaction.Triggers>
									<i:Interaction.Behaviors>
										<interactivity:KeyPressToCommand Command="{Binding BeginEditCommand}" Key="F2"/>
									</i:Interaction.Behaviors>
                                    </TextBlock>
                                    <TextBox x:Name="EditableText" Text="{Binding PropNode.Name}" Tag="{Binding}" Visibility="Collapsed" Margin="0,2,0,2"
						         commonUtils:TextBoxExtender.CommitOnEnter="true"
						         commonUtils:TextBoxExtender.RollbackOnEscape="true"
						         commonUtils:TextBoxExtender.SelectAllOnFocus="True"
						         commonUtils:TextBoxExtender.CommitOnTyping="false">
                                        <i:Interaction.Triggers>
                                            <i:EventTrigger EventName="LostKeyboardFocus">
                                                <interactivity:EventToCommand Command="{Binding DoneEditingCommand}" DisableAssociatedObjectOnCannotExecute="False" />
                                            </i:EventTrigger>
                                        </i:Interaction.Triggers>
                                        <i:Interaction.Behaviors>
                                            <interactivity:KeyPressToCommand Command="{Binding DoneEditingCommand}" Key="Enter"/>
                                            <interactivity:KeyPressToCommand Command="{Binding CancelEditingCommand}" Key="Escape"/>
                                        </i:Interaction.Behaviors>
                                    </TextBox>
                                </StackPanel>
                                <HierarchicalDataTemplate.Triggers>
                                    <DataTrigger Binding="{Binding IsSelected}" Value="True">
                                        <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=ReadOnlyText}" TargetName="ReadOnlyText" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsEditing}" Value="True">
                                        <Setter TargetName="EditableText" Property="Visibility" Value="Visible" />
                                        <Setter TargetName="ReadOnlyText" Property="Visibility" Value="Collapsed"/>
                                        <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=EditableText}" TargetName="EditableText" />
                                    </DataTrigger>

                                </HierarchicalDataTemplate.Triggers>

                            </HierarchicalDataTemplate>

                        </TreeView.ItemTemplate>

                    </TreeView>
                </TabItem>

                <TabItem Header="Props">
                    <ListView x:Name="PropView" Style="{StaticResource PropListStyle}"
                            ItemsSource="{Binding PropNodeTreeViewModel.LeafNodes}"
                            BorderThickness="0"
                            ScrollViewer.CanContentScroll="True"
                            FocusManager.IsFocusScope="True">
                        <i:Interaction.Behaviors>
                            <behaviors:MultiSelectionBehavior SelectedItems="{Binding PropNodeTreeViewModel.SelectedItems}" />
                        </i:Interaction.Behaviors>
                        <ListView.ItemTemplate >
                            <DataTemplate DataType="{x:Type viewModels:PropNodeViewModel}">
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock x:Name="ReadOnlyText" Text="{Binding PropNode.Name}" Margin="0,2,0,2" Focusable="True">
							<i:Interaction.Triggers>
								<i:EventTrigger EventName="MouseLeftButtonUp">
									<interactivity:EventToCommand Command="{Binding BeginEditCommand}" DisableAssociatedObjectOnCannotExecute="False" />
								</i:EventTrigger>
							</i:Interaction.Triggers>
							<i:Interaction.Behaviors>
								<interactivity:KeyPressToCommand Command="{Binding BeginEditCommand}" Key="F2"/>
							</i:Interaction.Behaviors>
                                    </TextBlock>
                                    <TextBox x:Name="EditableText" Text="{Binding Prop.Name}" Tag="{Binding}" Visibility="Collapsed" Margin="0,2,0,2"
						         commonUtils:TextBoxExtender.CommitOnEnter="true"
						         commonUtils:TextBoxExtender.RollbackOnEscape="true"
						         commonUtils:TextBoxExtender.SelectAllOnFocus="True"
						         commonUtils:TextBoxExtender.CommitOnTyping="false">
                                        <i:Interaction.Triggers>
                                            <i:EventTrigger EventName="LostKeyboardFocus">
                                                <interactivity:EventToCommand Command="{Binding DoneEditingCommand}" DisableAssociatedObjectOnCannotExecute="False" />
                                            </i:EventTrigger>
                                        </i:Interaction.Triggers>
                                        <i:Interaction.Behaviors>
                                            <interactivity:KeyPressToCommand Command="{Binding DoneEditingCommand}" Key="Enter"/>
                                            <interactivity:KeyPressToCommand Command="{Binding CancelEditingCommand}" Key="Escape"/>
                                        </i:Interaction.Behaviors>
                                    </TextBox>

                                </StackPanel>
                                <DataTemplate.Triggers>
                                    <DataTrigger Binding="{Binding IsSelected}" Value="True">
                                        <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=ReadOnlyText}" TargetName="ReadOnlyText" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsEditing}" Value="True">
                                        <Setter TargetName="EditableText" Property="Visibility" Value="Visible" />
                                        <Setter TargetName="ReadOnlyText" Property="Visibility" Value="Collapsed"/>
                                        <!--<Setter TargetName="OrderText" Property="Visibility" Value="Collapsed"/>-->
                                        <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=EditableText}" TargetName="EditableText" />
                                    </DataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </ListView.ItemTemplate>
                    </ListView>
                </TabItem>
            </TabControl>

        </Grid>
    </Border>
</UserControl>
