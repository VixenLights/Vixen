<ResourceDictionary
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:a="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
  xmlns:controls="clr-namespace:Common.WPFCommon.Controls">

  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="Brushes.xaml" />
  </ResourceDictionary.MergedDictionaries>
	
	
  <Style x:Key="{x:Type Menu}" TargetType="{x:Type Menu}">
    <Setter Property="OverridesDefaultStyle" Value="True"/>
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Menu}">
          <Border CornerRadius="3,3,0,0">
            <StackPanel ClipToBounds="True" Orientation="Horizontal" IsItemsHost="True"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- SimpleStyles: ContextMenu -->

  <Style TargetType="{x:Type ContextMenu}">
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="OverridesDefaultStyle" Value="True"/>
    <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
    <Setter Property="HasDropShadow" Value="True"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ContextMenu}">
          <Border
            Name="Border"
            Background="{StaticResource BackColorBrush}"
            BorderBrush="{StaticResource BorderColorBrush}"
            BorderThickness="1" >
            <controls:IndexingStackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="HasDropShadow" Value="true">
              <Setter TargetName="Border" Property="Padding" Value="0,3,0,3"/>
              <Setter TargetName="Border" Property="CornerRadius" Value="4"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- SimpleStyles: MenuItem -->

  <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="Height" Value="2"/>
    <Setter Property="Margin" Value="0,4,0,4"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Separator}">
					<StackPanel SnapsToDevicePixels="True" Height="2" >
						<Rectangle Height="1" Fill="#222" />
						<Rectangle Height="2" Fill="#666" />
					</StackPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

  <!-- TopLevelHeader -->

  <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
    <Border Name="Border" >
      <Border.Background>
        <SolidColorBrush Color="#00585858" />
      </Border.Background>
      <Grid>
        <ContentPresenter
          x:Name="Content"
          TextElement.Foreground="#80FFFFFF"
          VerticalAlignment="Center"
          HorizontalAlignment="Center"
          Margin="10,2,10,5"
          ContentSource="Header"
          RecognizesAccessKey="True" />
        <Popup
          Name="Popup"
          Placement="Bottom"
          IsOpen="{TemplateBinding IsSubmenuOpen}"
          AllowsTransparency="True"
          Focusable="False"
          PopupAnimation="Fade">
          <a:SystemDropShadowChrome CornerRadius="4"  Margin="0,0,5,5">
            <Border
              Name="SubmenuBorder"
              CornerRadius="0,4,4,4"
              SnapsToDevicePixels="True"
              Background="#585858" >
              <controls:IndexingStackPanel
                IsItemsHost="True" 
                KeyboardNavigation.DirectionalNavigation="Cycle" />
            </Border>
          </a:SystemDropShadowChrome>
        </Popup>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>

      <Trigger Property="IsHighlighted" Value="true">
        <Setter TargetName="Content" Property="TextElement.Foreground" Value="#FFF" />
        <Setter TargetName="Border" Property="Background">
          <Setter.Value>
            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
              <GradientStop Offset="0.0" Color="#909090" />
              <GradientStop Offset="1.0" Color="#505050" />
            </LinearGradientBrush>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="IsSuspendingPopupAnimation" Value="True">
        <Setter TargetName="Popup" Property="PopupAnimation" Value="None" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSuspendingPopupAnimation" Value="True" />
          <Condition Property="IsHighlighted" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="Border" Property="Background">
          <Setter.Value>
            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
              <GradientStop Offset="0.0" Color="#909090" />
              <GradientStop Offset="1.0" Color="#505050" />
            </LinearGradientBrush>
          </Setter.Value>
        </Setter>
        <Setter TargetName="Content" Property="TextElement.Foreground" Value="#FFFFFFFF" />
      </MultiTrigger>

    </ControlTemplate.Triggers>
  </ControlTemplate>

  <!-- TopLevelItem -->

  <ControlTemplate x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}" TargetType="{x:Type MenuItem}">
    <Border Name="Border" >
      <Border.Background>
        <SolidColorBrush Color="#00585858" />
      </Border.Background>
      <ContentPresenter
        x:Name="Content"
        TextElement.Foreground="#80FFFFFF"
        VerticalAlignment="Center"
        HorizontalAlignment="Center"
        Margin="10,2,10,5"
        ContentSource="Header"
        RecognizesAccessKey="True" />
    </Border>
    <ControlTemplate.Triggers>

      <Trigger Property="IsHighlighted" Value="true">
        <Setter TargetName="Content" Property="TextElement.Foreground" Value="#FFF" />
        <Setter TargetName="Border" Property="Background">
          <Setter.Value>
            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
              <GradientStop Offset="0.0" Color="#909090" />
              <GradientStop Offset="1.0" Color="#505050" />
            </LinearGradientBrush>
          </Setter.Value>
        </Setter>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSuspendingPopupAnimation" Value="True" />
          <Condition Property="IsHighlighted" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="Border" Property="Background">
          <Setter.Value>
            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
              <GradientStop Offset="0.0" Color="#909090" />
              <GradientStop Offset="1.0" Color="#505050" />
            </LinearGradientBrush>
          </Setter.Value>
        </Setter>
        <Setter TargetName="Content" Property="TextElement.Foreground" Value="#FFFFFFFF" />
      </MultiTrigger>

    </ControlTemplate.Triggers>
  </ControlTemplate>

  <!-- SubmenuItem -->

  <ControlTemplate
    x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}"
    TargetType="{x:Type MenuItem}">
    <Border Name="Border" Background="Transparent" >
      <Grid>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
          <ColumnDefinition Width="*" />
          <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
          <ColumnDefinition Width="13"/>
        </Grid.ColumnDefinitions>
        <ContentPresenter
          Name="Icon"
	        MinWidth="16"
			Width="Auto"
          Margin="6,4,6,4"
          VerticalAlignment="Center"
          HorizontalAlignment="Center"
          ContentSource="Icon"/>
        <Border
          Name="Check"
          Width="13" Height="13"
          Visibility="Collapsed"
          Margin="6,2,6,2"
          Background="Transparent"
          HorizontalAlignment="Center">
          <Path
            Name="CheckMark"
            Width="7" Height="7"
            Visibility="Hidden"
            SnapsToDevicePixels="False"
            Stroke="{StaticResource ForeColorBrush}"
            StrokeThickness="2"
            Data="M0,2.5L2.5,5 7,0.5" />
        </Border>
        <ContentPresenter
          Margin="0,4"
          TextElement.Foreground="#FFF"
          Name="HeaderHost"
          Grid.Column="1"
          ContentSource="Header"
          RecognizesAccessKey="True"/>
        <TextBlock x:Name="InputGestureText"
          TextElement.Foreground="#FFF"
          Grid.Column="2"
          Text="{TemplateBinding InputGestureText}"
          Margin="5,4,0,4"
          DockPanel.Dock="Right" />
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="Icon" Value="{x:Null}">
        <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
      </Trigger>
      <Trigger Property="IsChecked" Value="true">
        <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
      </Trigger>
      <Trigger Property="IsCheckable" Value="true">
        <Setter TargetName="Check" Property="Visibility" Value="Visible"/>
        <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
      </Trigger>
      <Trigger Property="IsHighlighted" Value="true">
        <Setter TargetName="Border" Property="Background" Value="#707070" />
      </Trigger>
      <Trigger Property="controls:IndexingStackPanel.StackLocation" Value="First" >
        <Setter TargetName="Border" Property="CornerRadius" Value="0,4,0,0" />
      </Trigger>
      <Trigger Property="controls:IndexingStackPanel.StackLocation" Value="Last" >
        <Setter TargetName="Border" Property="CornerRadius" Value="0,0,4,4" />
      </Trigger>
      <Trigger Property="controls:IndexingStackPanel.StackLocation" Value="FirstAndLast" >
        <Setter TargetName="Border" Property="CornerRadius" Value="0,4,4,4" />
      </Trigger>
      <!--<Trigger Property="IsEnabled" Value="false">
        <Setter TargetName="HeaderHost" Property="TextElement.Foreground" Value="#777"/>
        <Setter TargetName="InputGestureText" Property="TextElement.Foreground" Value="#777"/>
      </Trigger>-->
	    <Trigger Property="IsEnabled" Value="False">
		    <Setter Property="Opacity" Value="0.5"/>
	    </Trigger>
		</ControlTemplate.Triggers>
  </ControlTemplate>

  <!-- SubmenuHeader -->

  <ControlTemplate
    x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}"
    TargetType="{x:Type MenuItem}">
    <Border Name="Border" >
      <Grid>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
          <ColumnDefinition Width="*" />
          <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
          <ColumnDefinition Width="20"/>
        </Grid.ColumnDefinitions>
        <ContentPresenter
          Name="Icon"
          Margin="6,0,6,0"
          VerticalAlignment="Center"
          HorizontalAlignment="Center"
          ContentSource="Icon"/>
        <ContentPresenter
          Margin="0,4"
          TextElement.Foreground="#FFF"
          Name="HeaderHost"
          Grid.Column="1"
          ContentSource="Header"
          RecognizesAccessKey="True"/>
        <TextBlock x:Name="InputGestureText"
          TextElement.Foreground="#FFF"
          Grid.Column="2"
          Text="{TemplateBinding InputGestureText}"
          Margin="5,2,2,2"
          DockPanel.Dock="Right"/>
        <Path
          Name="Arrow"
          Margin="4,0,0,0" 
          Grid.Column="3"
          HorizontalAlignment="Left"
          VerticalAlignment="Center"
          Data="M 0 0 L 0 7 L 4 3.5 Z"
          Fill="White" />
        <Popup
          Name="Popup"
          HorizontalOffset="-8" 
          Placement="Right"
          IsOpen="{TemplateBinding IsSubmenuOpen}"
          AllowsTransparency="True"
          Focusable="False"
          PopupAnimation="Fade">
          <a:SystemDropShadowChrome CornerRadius="4"  Margin="0,0,5,5">
            <Border
              Name="SubmenuBorder"
              CornerRadius="4,4,4,4"
              SnapsToDevicePixels="True"
              Background="#585858" >
              <controls:IndexingStackPanel
                IsItemsHost="True"
                KeyboardNavigation.DirectionalNavigation="Cycle" />
            </Border>
          </a:SystemDropShadowChrome>
        </Popup>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="Icon" Value="{x:Null}">
        <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
      </Trigger>
      <Trigger Property="IsHighlighted" Value="true">
        <Setter TargetName="Border" Property="Background" Value="#707070" />
      </Trigger>
      <Trigger Property="controls:IndexingStackPanel.StackLocation" Value="First" >
        <Setter TargetName="Border" Property="CornerRadius" Value="0,4,0,0" />
      </Trigger>
      <Trigger Property="controls:IndexingStackPanel.StackLocation" Value="Last" >
        <Setter TargetName="Border" Property="CornerRadius" Value="0,0,4,4" />
      </Trigger>
      <Trigger Property="controls:IndexingStackPanel.StackLocation" Value="FirstAndLast" >
        <Setter TargetName="Border" Property="CornerRadius" Value="0,4,4,4" />
      </Trigger>
      <!--<Trigger Property="IsEnabled" Value="false">
        <Setter TargetName="HeaderHost" Property="TextElement.Foreground" Value="#777"/>
        <Setter TargetName="InputGestureText" Property="TextElement.Foreground" Value="#777"/>
      </Trigger>-->
	    <Trigger Property="IsEnabled" Value="False">
		    <Setter Property="Opacity" Value="0.5"/>
	    </Trigger>
		</ControlTemplate.Triggers>
  </ControlTemplate>

  <!-- MenuItem Style -->

  <Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}">
    <Setter Property="OverridesDefaultStyle" Value="True"/>
    <Style.Triggers>
      <Trigger Property="Role" Value="TopLevelHeader">
        <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}"/>
        <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
      </Trigger>
      <Trigger Property="Role" Value="TopLevelItem">
        <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}"/>
      </Trigger>
      <Trigger Property="Role" Value="SubmenuHeader">
        <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}"/>
      </Trigger>
			<Trigger Property="Role" Value="SubmenuItem">
				<Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}"/>
			</Trigger>
		</Style.Triggers>
  </Style>



	<LinearGradientBrush x:Key="ToolBarHorizontalBackground" EndPoint="0,1" StartPoint="0,0">
		<GradientStop Color="#FFFFFF" Offset="0"/>
		<GradientStop Color="#FFFBFF" Offset="0.5"/>
		<GradientStop Color="#F7F7F7" Offset="1"/>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="ToolBarToggleButtonVerticalBackground" EndPoint="1,0" StartPoint="0,0">
		<GradientStop Color="#ECECEC" Offset="0"/>
		<GradientStop Color="#DDDDDD" Offset="0.5"/>
		<GradientStop Color="#A0A0A0" Offset="1"/>
	</LinearGradientBrush>
	<SolidColorBrush x:Key="ToolBarButtonHover" Color="#C2E0FF"/>
	<SolidColorBrush x:Key="ToolBarGripper" Color="#C6C3C6"/>
	<Style x:Key="ToolBarVerticalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
		<Setter Property="Background" Value="{StaticResource BackColorBrush}"/>
		<Setter Property="MinHeight" Value="0"/>
		<Setter Property="MinWidth" Value="0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border x:Name="Bd" SnapsToDevicePixels="true" CornerRadius="0,0,3,3" Background="{TemplateBinding Background}">
						<Canvas Width="7" VerticalAlignment="Bottom" SnapsToDevicePixels="true" Margin="2,7,2,2" Height="6" HorizontalAlignment="Right">
							<Path Data="M 1.5 1 L 1.5 6" Stroke="White"/>
							<Path Data="M 0.5 0 L 0.5 5" Stroke="{TemplateBinding Foreground}"/>
							<Path Data="M 3.5 0.5 L 7 3.5 L 4 6.5 Z" Fill="White"/>
							<Path Data="M 3 -0.5 L 6 2.5 L 3 5.5 Z" Fill="{TemplateBinding Foreground}"/>
						</Canvas>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" TargetName="Bd" Value="{StaticResource ToolBarButtonHover}"/>
						</Trigger>
						<Trigger Property="IsKeyboardFocused" Value="true">
							<Setter Property="Background" TargetName="Bd" Value="{StaticResource ToolBarButtonHover}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{StaticResource ToolBarGripper}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
				<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
			</DataTrigger>
		</Style.Triggers>
	</Style>
	<LinearGradientBrush x:Key="ToolBarVerticalBackground" EndPoint="1,0" StartPoint="0,0">
		<GradientStop Color="#FFFFFF" Offset="0"/>
		<GradientStop Color="#FFFBFF" Offset="0.5"/>
		<GradientStop Color="#F7F7F7" Offset="1"/>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="ToolBarToggleButtonHorizontalBackground" EndPoint="0,1" StartPoint="0,0">
		<GradientStop Color="#ECECEC" Offset="0"/>
		<GradientStop Color="#DDDDDD" Offset="0.5"/>
		<GradientStop Color="#A0A0A0" Offset="1"/>
	</LinearGradientBrush>
	<Style x:Key="ToolBarHorizontalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
		<Setter Property="Background" Value="{StaticResource BackColorBrush}"/>
		<Setter Property="MinHeight" Value="0"/>
		<Setter Property="MinWidth" Value="0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border x:Name="Bd" SnapsToDevicePixels="true" CornerRadius="0,3,3,0" Background="{TemplateBinding Background}">
						<Canvas Width="6" VerticalAlignment="Bottom" SnapsToDevicePixels="true" Margin="7,2,2,2" Height="7" HorizontalAlignment="Right">
							<Path Data="M 1 1.5 L 6 1.5" Stroke="White"/>
							<Path Data="M 0 0.5 L 5 0.5" Stroke="{TemplateBinding Foreground}"/>
							<Path Data="M 0.5 4 L 6.5 4 L 3.5 7 Z" Fill="White"/>
							<Path Data="M -0.5 3 L 5.5 3 L 2.5 6 Z" Fill="{TemplateBinding Foreground}"/>
						</Canvas>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" TargetName="Bd" Value="{StaticResource ToolBarButtonHover}"/>
						</Trigger>
						<Trigger Property="IsKeyboardFocused" Value="true">
							<Setter Property="Background" TargetName="Bd" Value="{StaticResource ToolBarButtonHover}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{StaticResource ToolBarGripper}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
				<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
			</DataTrigger>
		</Style.Triggers>
	</Style>
	<SolidColorBrush x:Key="ToolBarMenuBorder" Color="#808080"/>
	<SolidColorBrush x:Key="ToolBarSubMenuBackground" Color="#FDFDFD"/>
	<Style x:Key="ToolBarThumbStyle" TargetType="{x:Type Thumb}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Border SnapsToDevicePixels="True" Padding="{TemplateBinding Padding}" Background="Transparent">
						<Rectangle>
							<Rectangle.Fill>
								<DrawingBrush ViewboxUnits="Absolute" ViewportUnits="Absolute" Viewport="0,0,4,4" Viewbox="0,0,4,4" TileMode="Tile">
									<DrawingBrush.Drawing>
										<DrawingGroup>
											<GeometryDrawing Brush="{StaticResource BorderColorBrush}" Geometry="M 1 1 L 1 3 L 3 3 L 3 1 z"/>
											<GeometryDrawing Brush="{StaticResource BorderColorBrush}" Geometry="M 0 0 L 0 2 L 2 2 L 2 0 z"/>
										</DrawingGroup>
									</DrawingBrush.Drawing>
								</DrawingBrush>
							</Rectangle.Fill>
						</Rectangle>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Cursor" Value="SizeAll"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ToolBarMainPanelBorderStyle" TargetType="{x:Type Border}">
		<Setter Property="Margin" Value="0,0,11,0"/>
		<Setter Property="CornerRadius" Value="3,3,3,3"/>
		<Style.Triggers>
			<DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
				<Setter Property="CornerRadius" Value="0,0,0,0"/>
			</DataTrigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="{x:Type ToolBar}" TargetType="{x:Type ToolBar}">
		<Setter Property="OverridesDefaultStyle" Value="True"/>
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="Background" Value="{StaticResource BackColorBrush}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToolBar}">
					<Grid x:Name="Grid" Margin="3,1,1,1" SnapsToDevicePixels="true">
						<Grid x:Name="OverflowGrid" HorizontalAlignment="Right">
							<ToggleButton x:Name="OverflowButton" ClickMode="Press" FocusVisualStyle="{x:Null}" IsChecked="{Binding IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsEnabled="{TemplateBinding HasOverflowItems}" Style="{StaticResource ToolBarHorizontalOverflowButtonStyle}"/>
							<Popup x:Name="OverflowPopup" AllowsTransparency="true" Focusable="false" IsOpen="{Binding IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom" StaysOpen="false">
								<a:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
									<Border x:Name="ToolBarSubMenuBorder" BorderBrush="{StaticResource ToolBarMenuBorder}" BorderThickness="1" Background="{StaticResource BackColorBrush}" RenderOptions.ClearTypeHint="Enabled">
										<ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel" KeyboardNavigation.DirectionalNavigation="Cycle" FocusVisualStyle="{x:Null}" Focusable="true" Margin="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle" WrapWidth="200"/>
									</Border>
								</a:SystemDropShadowChrome>
							</Popup>
						</Grid>
						<Border x:Name="MainPanelBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" Style="{StaticResource ToolBarMainPanelBorderStyle}">
							<DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
								<Thumb x:Name="ToolBarThumb" Margin="-3,-1,0,0" Padding="6,5,1,6" Style="{StaticResource ToolBarThumbStyle}" Width="10"/>
								<ContentPresenter x:Name="ToolBarHeader" ContentSource="Header" HorizontalAlignment="Center" Margin="4,0,4,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
								<ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="true" Margin="0,1,2,2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
							</DockPanel>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsOverflowOpen" Value="true">
							<Setter Property="IsEnabled" TargetName="ToolBarThumb" Value="false"/>
						</Trigger>
						<Trigger Property="Header" Value="{x:Null}">
							<Setter Property="Visibility" TargetName="ToolBarHeader" Value="Collapsed"/>
						</Trigger>
						<Trigger Property="ToolBarTray.IsLocked" Value="true">
							<Setter Property="Visibility" TargetName="ToolBarThumb" Value="Collapsed"/>
						</Trigger>
						<Trigger Property="HasDropShadow" SourceName="OverflowPopup" Value="true">
							<Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
							<Setter Property="SnapsToDevicePixels" TargetName="Shdw" Value="true"/>
							<Setter Property="Color" TargetName="Shdw" Value="#71000000"/>
						</Trigger>
						<Trigger Property="Orientation" Value="Vertical">
							<Setter Property="Margin" TargetName="Grid" Value="1,3,1,1"/>
							<Setter Property="Style" TargetName="OverflowButton" Value="{StaticResource ToolBarVerticalOverflowButtonStyle}"/>
							<Setter Property="Height" TargetName="ToolBarThumb" Value="10"/>
							<Setter Property="Width" TargetName="ToolBarThumb" Value="Auto"/>
							<Setter Property="Margin" TargetName="ToolBarThumb" Value="-1,-3,0,0"/>
							<Setter Property="Padding" TargetName="ToolBarThumb" Value="5,6,6,1"/>
							<Setter Property="Margin" TargetName="ToolBarHeader" Value="0,0,0,4"/>
							<Setter Property="Margin" TargetName="PART_ToolBarPanel" Value="1,0,2,2"/>
							<Setter Property="DockPanel.Dock" TargetName="ToolBarThumb" Value="Top"/>
							<Setter Property="DockPanel.Dock" TargetName="ToolBarHeader" Value="Top"/>
							<Setter Property="HorizontalAlignment" TargetName="OverflowGrid" Value="Stretch"/>
							<Setter Property="VerticalAlignment" TargetName="OverflowGrid" Value="Bottom"/>
							<Setter Property="Placement" TargetName="OverflowPopup" Value="Right"/>
							<Setter Property="Margin" TargetName="MainPanelBorder" Value="0,0,0,11"/>
							<Setter Property="Background" Value="{StaticResource ToolBarVerticalBackground}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
				<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
			</DataTrigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="{x:Static ToolBar.ButtonStyleKey}" TargetType="{x:Type Button}">
		<Setter Property="Foreground"
		        Value="{StaticResource ForeColorBrush}"/>
		<Setter Property="Padding" Value="2"/>
		<Setter Property="BorderThickness" Value="4"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="HorizontalAlignment" Value="Center"/>
		<Setter Property="VerticalAlignment" Value="Center"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border x:Name="Bd"
					        SnapsToDevicePixels="true"
					        Background="{TemplateBinding Background}"
					        BorderBrush="{TemplateBinding BorderBrush}"
					        BorderThickness="1"
					        Padding="{TemplateBinding Padding}">
						<ContentPresenter
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
					</Border>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsEnabled" Value="False"/>
								<Condition Property="IsMouseOver" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter Property="BorderBrush" TargetName="Bd" Value="Transparent"/>
						</MultiTrigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.MouseOver.Border}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity"  Value=".65"/>
						</Trigger>
					</ControlTemplate.Triggers>
					
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="RadioButtonStyle" TargetType="{x:Type RadioButton}">
		<Setter Property="Foreground"
		        Value="{StaticResource ForeColorBrush}"/>
		<Setter Property="Padding" Value="2"/>
		<Setter Property="BorderThickness" Value="4"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="HorizontalAlignment" Value="Center"/>
		<Setter Property="VerticalAlignment" Value="Center"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RadioButton}">
					<Border x:Name="Bd"
					        SnapsToDevicePixels="true"
					        Background="{TemplateBinding Background}"
					        BorderBrush="{TemplateBinding BorderBrush}"
					        BorderThickness="1"
					        Padding="{TemplateBinding Padding}">
						<ContentPresenter
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
					</Border>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsEnabled" Value="False"/>
								<Condition Property="IsMouseOver" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter Property="BorderBrush" TargetName="Bd" Value="Transparent"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsEnabled" Value="False"/>
								<Condition Property="IsChecked" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource DisabledShadow}"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsEnabled" Value="True"/>
								<Condition Property="IsChecked" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource BorderColorBrush}"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="True"/>
								<Condition Property="IsChecked" Value="False"/>
							</MultiTrigger.Conditions>
							<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.MouseOver.Border}"/>
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity"  Value=".65"/>
						</Trigger>
					</ControlTemplate.Triggers>

				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>