<UserControl x:Class="VixenModules.App.CustomPropEditor.Views.ElementTree"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:interactivity="http://schemas.catelproject.com"
             xmlns:viewModels="clr-namespace:VixenModules.App.CustomPropEditor.ViewModels"
             xmlns:behaviors="clr-namespace:VixenModules.App.CustomPropEditor.Behaviors"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300"
             xmlns:dd="urn:gong-wpf-dragdrop"
             xmlns:commonUtils="clr-namespace:Common.WPFCommon.Utils;assembly=WPFCommon"
             xmlns:behaviors1="clr-namespace:Common.WPFCommon.Behaviors;assembly=WPFCommon">

	<UserControl.Resources>

		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="pack://application:,,,/WPFCommon;component/Theme/Theme.xaml"/>
			</ResourceDictionary.MergedDictionaries>

			<BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>


			<Style x:Key="ElementListViewItemContainerStyle" TargetType="{x:Type ListViewItem}">
				<Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
				<Setter Property="Background" Value="Transparent"/>
				<Setter Property="IsTabStop" Value="False"/>
				<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
				<Setter Property="SnapsToDevicePixels" Value="True"/>
				<Setter Property="Padding" Value="4,1"/>
				<!--<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>-->

				<Setter Property="BorderBrush" Value="Transparent"/>
				<Setter Property="BorderThickness" Value="1"/>

				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ListViewItem}">
							<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
								<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
							</Border>
							<ControlTemplate.Triggers>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsSelected" Value="True"/>
										<Condition Property="Selector.IsSelectionActive" Value="False"/>
									</MultiTrigger.Conditions>
									<Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Background}"/>
									<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Border}"/>
								</MultiTrigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsSelected" Value="True"/>
										<Condition Property="Selector.IsSelectionActive" Value="True"/>
									</MultiTrigger.Conditions>
									<Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Background}"/>
									<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Border}"/>
									<Setter Property="BorderThickness" TargetName="Bd" Value="1"></Setter>
									<Setter Property="Foreground" Value="{StaticResource ForeColorBrush}"/>
								</MultiTrigger>
								<Trigger Property="IsEnabled" Value="False">
									<Setter Property="TextElement.Foreground" TargetName="Bd" Value="{StaticResource ForeColorDisabled}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="ElementListStyle" TargetType="{x:Type ListView}">
				<Setter Property="Foreground" Value="{StaticResource ForeColorBrush}"/>
				<Setter Property="Background" Value="{StaticResource BackColorBrush}" />
				<Setter Property="ItemContainerStyle" Value="{StaticResource ElementListViewItemContainerStyle}"></Setter>
			</Style>

			<Style x:Key="ElementTreeViewItemContainerStyle" TargetType="{x:Type TreeViewItem}">
				<Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}"></Setter>
				<Setter Property="behaviors1:TreeViewMultipleSelectionBehavior.IsItemSelected" Value="{Binding IsSelected, Mode=TwoWay}"></Setter>
				<Setter Property="Background" Value="Transparent"/>
				<Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment,
				  RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
				<Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment,
				  RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
				<Setter Property="Padding" Value="1,0,0,0"/>
				<Setter Property="Foreground" Value="{StaticResource ForeColorBrush}"/>
				<Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type TreeViewItem}">
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition MinWidth="19" Width="Auto"/>
									<ColumnDefinition Width="Auto"/>
									<ColumnDefinition Width="*"/>
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto"/>
									<RowDefinition/>
								</Grid.RowDefinitions>
								<ToggleButton x:Name="Expander" Style="{StaticResource ExpandCollapseToggleStyle}" IsChecked="{Binding Path=IsExpanded,
								  RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>
								<Border Name="Bd" Grid.Column="1" BorderThickness="1" >
									<ContentPresenter x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
								</Border>
								<ItemsPresenter x:Name="ItemsHost" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2"/>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="IsExpanded" Value="false">
									<Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
								</Trigger>
								<Trigger Property="HasItems" Value="false">
									<Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
								</Trigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="HasHeader" Value="false"/>
										<Condition Property="Width" Value="Auto"/>
									</MultiTrigger.Conditions>
									<Setter TargetName="PART_Header" Property="MinWidth" Value="75"/>
								</MultiTrigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="HasHeader" Value="false"/>
										<Condition Property="Height" Value="Auto"/>
									</MultiTrigger.Conditions>
									<Setter TargetName="PART_Header" Property="MinHeight" Value="19"/>
								</MultiTrigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="behaviors1:TreeViewMultipleSelectionBehavior.IsItemSelected" Value="true"/>
										<Condition Property="Selector.IsSelectionActive" Value="false"/>
									</MultiTrigger.Conditions>
									<Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Background}"/>
									<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Border}"/>
								</MultiTrigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="behaviors1:TreeViewMultipleSelectionBehavior.IsItemSelected" Value="true"/>
										<Condition Property="Selector.IsSelectionActive" Value="True"/>
									</MultiTrigger.Conditions>
									<Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Background}" />
									<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Border}"/>
									<Setter Property="BorderThickness" TargetName="Bd" Value="1"></Setter>
									<Setter Property="Foreground" Value="{StaticResource ForeColorBrush}"/>
								</MultiTrigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Foreground" Value="{StaticResource ForeColorDisabled}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="ElementTreeViewStyle" TargetType="{x:Type TreeView}">
				<Setter Property="Foreground" Value="{StaticResource ForeColorBrush}"/>
				<Setter Property="Background" Value="{StaticResource BackColorBrush}" />
				<Setter Property="ItemContainerStyle" Value="{StaticResource ElementTreeViewItemContainerStyle}" />
				<Setter Property="Padding" Value="0" />
			</Style>

			<ContextMenu x:Key="ElementTreeContextMenu">
				<MenuItem Header="Create Empty Group" Command="{Binding Path=DataContext.ElementTreeViewModel.CreateNodeCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"></MenuItem>
				<MenuItem Header="Copy to New Group" Command="{Binding Path=DataContext.ElementTreeViewModel.CreateGroupCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"></MenuItem>
				<MenuItem Header="Move to New Group" Command="{Binding Path=DataContext.ElementTreeViewModel.MoveToGroupCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"></MenuItem>
				<Separator/>
				<MenuItem Header="Cut" Command="{Binding Path=DataContext.ElementTreeViewModel.CutCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}">
					<MenuItem.Icon>
						<Image Source="/Resources;component/cut.png" Width="16" Height="16"></Image>
					</MenuItem.Icon>
				</MenuItem>
				<MenuItem Header="Copy" Command="{Binding Path=DataContext.ElementTreeViewModel.CopyCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}">
					<MenuItem.Icon>
						<Image Source="/Resources;component/page_white_copy.png" Width="16" Height="16"></Image>
					</MenuItem.Icon>
				</MenuItem>
				<MenuItem Header="Paste" Command="{Binding Path=DataContext.ElementTreeViewModel.PasteCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}">
					<MenuItem.Icon>
						<Image Source="/Resources;component/page_white_paste.png" Width="16" Height="16"></Image>
					</MenuItem.Icon>
				</MenuItem>
				<MenuItem Header="Paste as New" Command="{Binding Path=DataContext.ElementTreeViewModel.PasteAsNewCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}">
					<MenuItem.Icon>
						<Image Source="/Resources;component/page_white_paste.png" Width="16" Height="16"></Image>
					</MenuItem.Icon>
				</MenuItem>
				<Separator/>
				<MenuItem Header="Delete" Command="{Binding Path=DataContext.DeleteCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" CommandParameter="{Binding}">
					<MenuItem.Icon>
						<Image Source="/Resources;component/Resources/delete_32.png" Width="16" Height="16"></Image>
					</MenuItem.Icon>
				</MenuItem>
				<MenuItem Header="Rename" Command="{Binding Path=DataContext.ElementTreeViewModel.RenameCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" CommandParameter="{Binding}"></MenuItem>
				<MenuItem Header="Find/Replace Rename" Command="{Binding Path=DataContext.ElementTreeViewModel.SubstitutionRenameCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" CommandParameter="{Binding}"></MenuItem>
			</ContextMenu>

			<ContextMenu x:Key="ElementOrderTreeContextMenu">
				<MenuItem Header="Reverse" Command="{Binding Path=DataContext.ElementOrderViewModel.ReverseSelectedCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" CommandParameter="{Binding}"></MenuItem>
				<MenuItem Header="Rename" Command="{Binding Path=DataContext.ElementOrderViewModel.TemplateRenameCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" CommandParameter="{Binding}"></MenuItem>
				<MenuItem Header="Find/Replace Rename" Command="{Binding Path=DataContext.ElementOrderViewModel.SubstitutionRenameCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" CommandParameter="{Binding}"></MenuItem>
			</ContextMenu>

			<!-- For the context menu to work, we must shift it into a style, which means that the context menu is now in a
			visual tree that is more closely related to the current data context. All we have to do then is set the style, 
			which hooks up the context menu. -->
			<Style x:Key="ElementModelContextMenuStyle" TargetType="{x:Type TextBlock}">
				<Setter Property="ContextMenu" Value="{StaticResource ElementTreeContextMenu}"/>
			</Style>

			<Style x:Key="ElementTreeOrderContextMenuStyle" TargetType="{x:Type TextBlock}">
				<Setter Property="ContextMenu" Value="{StaticResource ElementOrderTreeContextMenu}"/>
			</Style>
		</ResourceDictionary>

	</UserControl.Resources>

	<Grid>
		<TabControl Background="{StaticResource BackColorBrush}"
		            SelectedIndex="{Binding SelectedTabIndex}"
		            Width="Auto" Margin="5,5,10,5">
			<TabItem Header="Layout">
				<TreeView x:Name="ElementModelTreeView" Style="{StaticResource ElementTreeViewStyle}"
                  ItemsSource="{Binding ElementTreeViewModel.RootNodesViewModels}" 
				  BorderThickness="0"
                  VerticalAlignment="Stretch"
                  HorizontalAlignment="Stretch"
                  ScrollViewer.CanContentScroll="True"
                  FocusManager.IsFocusScope="True"
		          dd:DragDrop.IsDragSource="True"
		          dd:DragDrop.IsDropTarget="True"
		          dd:DragDrop.DropHandler="{Binding ElementTreeViewModel}"
		          dd:DragDrop.DragHandler="{Binding ElementTreeViewModel}">


					<i:Interaction.Behaviors>
						<behaviors1:TreeViewMultipleSelectionBehavior SelectedItems="{Binding ElementTreeViewModel.SelectedItems}" />
						<interactivity:KeyPressToCommand Command="{Binding DrawingPanelViewModel.DeleteSelectedLightsCommand}" Key="Delete" />
						<interactivity:KeyPressToCommand Command="{Binding ElementTreeViewModel.CutCommand}" Key="X" Modifiers="Control" />
						<interactivity:KeyPressToCommand Command="{Binding ElementTreeViewModel.CopyCommand}" Key="C" Modifiers="Control"/>
						<interactivity:KeyPressToCommand Command="{Binding ElementTreeViewModel.PasteCommand}" Key="V" Modifiers="Control"/>
					</i:Interaction.Behaviors>

					<TreeView.ItemTemplate>
						<HierarchicalDataTemplate ItemsSource="{Binding ChildrenViewModels}" DataType="{x:Type viewModels:ElementModelViewModel}">
							<StackPanel Orientation="Horizontal">
								<TextBlock x:Name="ReadOnlyText" Text="{Binding ElementModel.Name}" Margin="0,2,0,2" Style="{StaticResource ElementModelContextMenuStyle}" Focusable="True">
									<i:Interaction.Triggers>
										<i:EventTrigger EventName="MouseLeftButtonUp">
											<interactivity:EventToCommand Command="{Binding BeginEditCommand}" DisableAssociatedObjectOnCannotExecute="False" />
										</i:EventTrigger>
									</i:Interaction.Triggers>
									<i:Interaction.Behaviors>
										<interactivity:KeyPressToCommand Command="{Binding BeginEditCommand}" Key="F2"/>
									</i:Interaction.Behaviors>
								</TextBlock>
								<TextBox x:Name="EditableText" Text="{Binding ElementModel.Name}" Tag="{Binding}" Visibility="Collapsed" Margin="0,2,0,2"
						         commonUtils:TextBoxExtender.CommitOnEnter="true"
						         commonUtils:TextBoxExtender.RollbackOnEscape="true"
						         commonUtils:TextBoxExtender.SelectAllOnFocus="True"
						         commonUtils:TextBoxExtender.CommitOnTyping="false">
									<i:Interaction.Triggers>
										<i:EventTrigger EventName="LostKeyboardFocus">
											<interactivity:EventToCommand Command="{Binding DoneEditingCommand}" DisableAssociatedObjectOnCannotExecute="False" />
										</i:EventTrigger>
									</i:Interaction.Triggers>
									<i:Interaction.Behaviors>
										<interactivity:KeyPressToCommand Command="{Binding DoneEditingCommand}" Key="Enter"/>
										<interactivity:KeyPressToCommand Command="{Binding CancelEditingCommand}" Key="Escape"/>
									</i:Interaction.Behaviors>
								</TextBox>
							</StackPanel>
							<HierarchicalDataTemplate.Triggers>
								<DataTrigger Binding="{Binding IsSelected}" Value="True">
									<Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=ReadOnlyText}" TargetName="ReadOnlyText" />
								</DataTrigger>
								<DataTrigger Binding="{Binding IsEditing}" Value="True">
									<Setter TargetName="EditableText" Property="Visibility" Value="Visible" />
									<Setter TargetName="ReadOnlyText" Property="Visibility" Value="Collapsed"/>
									<Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=EditableText}" TargetName="EditableText" />
								</DataTrigger>

							</HierarchicalDataTemplate.Triggers>

						</HierarchicalDataTemplate>

					</TreeView.ItemTemplate>

				</TreeView>
			</TabItem>
			<TabItem Header="Order">
				<ListView x:Name="ElementOrderView" Style="{StaticResource ElementListStyle}"
				          ItemsSource="{Binding ElementOrderViewModel.LeafNodes}"
						  BorderThickness="0"
				          ScrollViewer.CanContentScroll="True"
				          FocusManager.IsFocusScope="True"
				          dd:DragDrop.IsDragSource="True"
				          dd:DragDrop.IsDropTarget="True"
				          dd:DragDrop.DropHandler="{Binding ElementOrderViewModel}">
					<i:Interaction.Behaviors>
						<behaviors:MultiSelectionBehavior SelectedItems="{Binding ElementOrderViewModel.SelectedItems}" />
						<interactivity:KeyPressToCommand Command="{Binding DrawingPanelViewModel.DeleteSelectedLightsCommand}" Key="Delete" />
					</i:Interaction.Behaviors>
					<ListView.ItemTemplate >
						<DataTemplate DataType="{x:Type viewModels:ElementModelViewModel}">
							<StackPanel Orientation="Horizontal">
								<TextBlock x:Name="OrderText" Margin="2,2,8,2" Text="{Binding ElementModel.Order}" 
								           Visibility="{Binding IsLightNode, Converter={StaticResource BooleanToVisibilityConverter }}">
								</TextBlock>
								<TextBlock x:Name="ReadOnlyText" Text="{Binding ElementModel.Name}" Margin="0,2,0,2" Style="{StaticResource ElementTreeOrderContextMenuStyle}" Focusable="True">
									<i:Interaction.Triggers>
										<i:EventTrigger EventName="MouseLeftButtonUp">
											<interactivity:EventToCommand Command="{Binding BeginEditCommand}" DisableAssociatedObjectOnCannotExecute="False" />
										</i:EventTrigger>
									</i:Interaction.Triggers>
									<i:Interaction.Behaviors>
										<interactivity:KeyPressToCommand Command="{Binding BeginEditCommand}" Key="F2"/>
									</i:Interaction.Behaviors>
								</TextBlock>
								<TextBox x:Name="EditableText" Text="{Binding ElementModel.Name}" Tag="{Binding}" Visibility="Collapsed" Margin="0,2,0,2"
								         commonUtils:TextBoxExtender.CommitOnEnter="true"
								         commonUtils:TextBoxExtender.RollbackOnEscape="true"
								         commonUtils:TextBoxExtender.SelectAllOnFocus="True"
								         commonUtils:TextBoxExtender.CommitOnTyping="false">
									<i:Interaction.Triggers>
										<i:EventTrigger EventName="LostKeyboardFocus">
											<interactivity:EventToCommand Command="{Binding DoneEditingCommand}" DisableAssociatedObjectOnCannotExecute="False" />
										</i:EventTrigger>
									</i:Interaction.Triggers>
									<i:Interaction.Behaviors>
										<interactivity:KeyPressToCommand Command="{Binding DoneEditingCommand}" Key="Enter"/>
										<interactivity:KeyPressToCommand Command="{Binding CancelEditingCommand}" Key="Escape"/>
									</i:Interaction.Behaviors>
								</TextBox>
								
							</StackPanel>
							<DataTemplate.Triggers>
								<DataTrigger Binding="{Binding IsSelected}" Value="True">
									<Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=ReadOnlyText}" TargetName="ReadOnlyText" />
								</DataTrigger>
								<DataTrigger Binding="{Binding IsEditing}" Value="True">
									<Setter TargetName="EditableText" Property="Visibility" Value="Visible" />
									<Setter TargetName="ReadOnlyText" Property="Visibility" Value="Collapsed"/>
									<!--<Setter TargetName="OrderText" Property="Visibility" Value="Collapsed"/>-->
									<Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=EditableText}" TargetName="EditableText" />
								</DataTrigger>
							</DataTemplate.Triggers>
						</DataTemplate>
					</ListView.ItemTemplate>
				</ListView>
			</TabItem>
		</TabControl>
		
	</Grid>
</UserControl>
