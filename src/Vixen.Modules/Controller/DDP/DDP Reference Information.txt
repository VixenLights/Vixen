/******************************************************************************
*   Data packets are sent to port 4048 UDP or TCP. This implementation uses UDP.
*
*   The full DPP spec is currently located at http://www.3waylabs.com/ddp/
*
*   The data packet format is as follows: (mostly copied from above URL)
*
*   byte 0:     Flags: V V x T S R Q P
*               V V:    2-bits for protocol version number (01 for this file)
*               x:      reserved
*               T:      timecode field added to end of header
*                       if T & P are set, Push at specified time
*               S:      Storage.  If set, data from Storage, not data-field.
*               R:      Reply flag, marks reply to Query packet.
*                       always set when any packet is sent by a Display.
*                       if Reply, Q flag is ignored.
*               Q:      Query flag, requests len data from ID at offset
*                       (no data sent). if clear, is a Write buffer packet
*               P:      Push flag, for display synchronization, or marks
*                       last packet of Reply
*
*   byte  1:    Flags: x x x x n n n n
*               x:      reserved for future use (set to zero)
*               nnnn:   sequence number from 1-15, or zero if not used.
*                       a sender can send duplicate packets with the same
*                       sequence number and DDP header for redundancy.
*                       a receiver can ignore duplicates received back-to-back.
*                       the sequence number is ignored if zero.
*
*   byte  2:    data type: S x t t t b b b
*               S:      0 = standard types, 1 = custom
*               x:      reserved for future use (set to zero)
*               ttt:    type, 0 = greyscale, 1 = rgb, 2 = hsl?
*               bbb:    bits per pixel:
*                       0=1, 1=4, 2=8, 3=16, 4=24, 5=32, 6=48, 7=64
*
*   byte  3:    Source or Destination ID
*               0 = reserved
*               1 = default output device
*               2=249 custom IDs, (possibly defined via JSON config) ?????
*               246 = JSON control (read/write)
*               250 = JSON config  (read/write)
*               251 = JSON status  (read only)
*               254 = DMX transit
*               255 = all devices
*
*   byte  4-7:  data offset in bytes (in units based on data-type.
*               ie: RGB=3 bytes=1 unit) or bytes??  32-bit number, MSB first
*
*   byte  8-9:  data length in bytes (size of data field when writing)
*               16-bit number, MSB first
*               for Queries, this specifies size of data to read,
*                   no data field follows header.
*
*  if T flag, header extended 4 bytes for timecode field (not counted in
*  data length)
*
*  byte 10-13: timecode
*
*  if no T flag, data starts at byte 10, otherwise byte 14
*
*  byte 10 or 14: start of data
*
******************************************************************************/

/*************FROM FPP CODE***************************************************/
    pktCount = channelCount / DDP_CHANNELS_PER_PACKET;
    if (channelCount % DDP_CHANNELS_PER_PACKET) {
        pktCount++;
    }

    ddpIovecs = (struct iovec*)calloc(pktCount * 2, sizeof(struct iovec));
    ddpBuffers = (unsigned char**)calloc(pktCount, sizeof(unsigned char*));

    int chan = startChannel - 1;
    if (type == 5) {
        chan = 0;
    }
    for (int x = 0; x < pktCount; x++) {
        ddpBuffers[x] = (unsigned char*)calloc(1, DDP_HEADER_LEN);

        // use scatter/gather for the packet.   One IOV will contain
        // the header, the second will point into the raw channel data
        // and will be set at output time.   This avoids any memcpy.
        ddpIovecs[x * 2].iov_base = ddpBuffers[x];
        ddpIovecs[x * 2].iov_len = DDP_HEADER_LEN;
        ddpIovecs[x * 2 + 1].iov_base = nullptr;

        ddpBuffers[x][0] = DDP_FLAGS1_VER1;
        ddpBuffers[x][2] = 1;
        ddpBuffers[x][3] = DDP_ID_DISPLAY;
        int pktSize = DDP_CHANNELS_PER_PACKET;
        if (x == (pktCount - 1)) {
            ddpBuffers[x][0] = DDP_FLAGS1_VER1 | DDP_FLAGS1_PUSH;
            //last packet
            if (channelCount % DDP_CHANNELS_PER_PACKET) {
                pktSize = channelCount % DDP_CHANNELS_PER_PACKET;
            }
        }
        ddpIovecs[x * 2 + 1].iov_len = pktSize;

        //offset
        ddpBuffers[x][4] = (chan & 0xFF000000) >> 24;
        ddpBuffers[x][5] = (chan & 0xFF0000) >> 16;
        ddpBuffers[x][6] = (chan & 0xFF00) >> 8;
        ddpBuffers[x][7] = (chan & 0xFF);

        //size
        ddpBuffers[x][8] = (pktSize & 0xFF00) >> 8;
        ddpBuffers[x][9] = pktSize & 0xFF;

        chan += pktSize;
    }